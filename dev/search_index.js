var documenterSearchIndex = {"docs":
[{"location":"manual/multi_dimension/#Plot-Combination","page":"Plot Combination","title":"Plot Combination","text":"","category":"section"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"There are four types of plots in Coefplots.jl: Coefplot, MultiCoefplot, GroupedCoefplot, GroupedMultiCoefplot. ","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"using PGFPlotsX\nsavefigs = (figname, obj) -> begin\n    pgfsave(figname * \".pdf\", obj)\n    run(`pdftocairo -svg -l  1 $(figname * \".pdf\") $(figname * \".svg\")`)\n    pgfsave(figname * \".tex\", obj);\n    return nothing\nend\n\nusing Coefplots\nusing RDatasets\nusing GLM\ndf = dataset(\"datasets\", \"iris\");\nregression_result = lm(@formula(SepalLength ~ SepalWidth + PetalLength + PetalWidth), df)\n\nusing FixedEffectModels\nregression_withFE = reg(df, @formula(SepalLength ~ SepalWidth + PetalLength + PetalWidth + fe(Species)));\ncoefplots_withfe = parse(regression_withFE; title=Label(content=\"OLS\"))\ncoefplots_pool = parse(regression_result; keepcoef = [\"SepalWidth\", \"PetalLength\", \"PetalWidth\"], title=Label(content=\"with species FE\"))","category":"page"},{"location":"manual/multi_dimension/#MultiCoefplot","page":"Plot Combination","title":"MultiCoefplot","text":"","category":"section"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"We continue the example in quick start. We have also ready seen MultiCoefplot() in the previous chapter.","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"m = MultiCoefplot(coefplots_withfe, coefplots_pool; title = Label(content=\"My combined Coefplots\"),\n                                                    xlabel = Label(content=\"Regressor Names\"),\n                                                    ylabel = Label(content=\"Coefficients\"),\n                                                    note = Note(content=\"This is my note.\"))\n\nm_plot = plot(m)\n\nsavefigs(\"md1\", m_plot) # hide","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"(Image: )","category":"page"},{"location":"manual/multi_dimension/#GroupedCoefplot","page":"Plot Combination","title":"GroupedCoefplot","text":"","category":"section"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"We also provide method GroupedCoefplot() to plot Coefplot objects side by side","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"g = GroupedCoefplot(\"OLS\" => coefplots_pool, \"FE\" => coefplots_withfe; \n    title = Label(content=\"My combined Coefplots\"),\n    ylabel = Label(content=\"Coefficients\"),\n    width = 350)\n\ng_plot = plot(g)\nsavefigs(\"md2\", g_plot) # hide","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"(Image: )","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"Not limited to plot multiple regressions, GroupedCoefplot() can also divide the coefficients in a single regression into multiple groups however the user wants. To make this happen, we first extract the regression results in DataFrame form,","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"df = deepcopy(coefplots_pool.data) # extract the regression results from Coefplot object\ndf","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"we add our categorization (it doesn't have to be called coefgroup), use DataFrames.jl's groupby() to produce a GroupedDataFrame, and then plug it in our GroupedCoefplot() method.","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"df.coefgroup = [\"Width Related\", \"Length Related\", \"Width Related\"]\ngrouped_df = groupby(df, [:coefgroup])\ng2 = GroupedCoefplot(grouped_df; title = Label(content=\"My combined Coefplots\"),\n                                 ylabel = Label(content=\"Coefficients\"),\n                                 width = 200)\n\ng2_plot = plot(g2)\nsavefigs(\"md3\", g2_plot) # hide","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"(Image: )","category":"page"},{"location":"manual/multi_dimension/#GroupedMultiCoefplot","page":"Plot Combination","title":"GroupedMultiCoefplot","text":"","category":"section"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"This type is reserved for scenarios when the user wants to have side-by-side plots and also overlapping plots. One can achieve this by plug in Pair{Any, MultiCoefplot} ... or Pair{Any, GroupedCoefplots} ... when invoking GroupedMultiCoefplot(). For example,","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"df = deepcopy(coefplots_withfe.data)\ndf.coefgroup = [\"Width Related\", \"Length Related\", \"Width Related\"]\ngrouped_df = groupby(df, [:coefgroup])\ng3 = GroupedCoefplot(grouped_df)\n\ngmc = GroupedMultiCoefplot(\"OLS\" => g2, \"FE\" => g3; show_legend=[false, true], # which subplot should show their legend\n                                                    legend = Coefplots.Legend(at=(0.98,0.02), \n                                                                              anchor = Symbol(\"south east\")))\n\ngmc_plot = plot(gmc)\nsavefigs(\"gmc\", gmc_plot) # hide","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/multi_dimension/","page":"Plot Combination","title":"Plot Combination","text":"(Image: )","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"using PGFPlotsX\nsavefigs = (figname, obj) -> begin\n    pgfsave(figname * \".pdf\", obj)\n    run(`pdftocairo -svg -l  1 $(figname * \".pdf\") $(figname * \".svg\")`)\n    pgfsave(figname * \".tex\", obj);\n    return nothing\nend\n\nsaveicon = (figname, icon) -> begin\n    obj = PGFPlotsX.TikzPicture(\"\\\\draw plot[mark=$(icon),mark size=4, mark options={fill=red, fill opacity=0.7}] (0,0) -- plot[mark=$(icon),mark size=4, mark options={fill=red, fill opacity=0.7}] (1,0.5) -- plot[mark=$(icon),mark size=4, mark options={fill=red, fill opacity=0.7}] (2,0) -- plot[mark=$(icon),mark size=4, mark options={fill=red, fill opacity=0.7}] (3,0.5);\")\n    pgfsave(figname * \".pdf\", obj)\n    run(`pdftocairo -svg -l  1 $(figname * \".pdf\") $(figname * \".svg\")`)\n    return nothing\nend\n\nsaveicon(\"filled_circle\", \"*\")\nsaveicon(\"cross\", \"x\")\nsaveicon(\"plus\", \"+\")\nsaveicon(\"minus\", \"-\")\nsaveicon(\"pipe\", \"|\")\nsaveicon(\"asterisk\", \"asterisk\")\nsaveicon(\"star\", \"star\")\nsaveicon(\"10_pointed_star\", \"10-pointed star\")\nsaveicon(\"oplus\", \"oplus\")\nsaveicon(\"filled_oplus\", \"oplus*\")\nsaveicon(\"otimes\", \"otimes\")\nsaveicon(\"filled_otimes\", \"otimes*\")\nsaveicon(\"square\", \"square\")\nsaveicon(\"filled_square\", \"square*\")\nsaveicon(\"triangle\", \"triangle\")\nsaveicon(\"filled_triangle\", \"triangle*\")\nsaveicon(\"diamond\", \"diamond\")\nsaveicon(\"filled_diamond\", \"diamond*\")\nsaveicon(\"halfcircle\", \"halfcircle\")\nsaveicon(\"filled_halfcircle\", \"halfcircle*\")\nsaveicon(\"filled_halfdiamond\", \"halfdiamond*\")\nsaveicon(\"filled_halfsquare\", \"halfsquare*\")\nsaveicon(\"filled_halfsquare_right\", \"halfsquare right*\")\nsaveicon(\"filled_halfsquare_left\", \"halfsquare left*\")\nsaveicon(\"pentagon\", \"pentagon\")\nsaveicon(\"filled_pentagon\", \"pentagon*\")\nsaveicon(\"Mercedes_star\", \"Mercedes star\")\nsaveicon(\"Mercedes_star_flipped\", \"Mercedes star flipped\")\nsaveicon(\"heart\", \"heart\")\nsaveicon(\"ball\", \"ball\")\n\n\nusing Coefplots\nusing RDatasets\nusing GLM\ndf = dataset(\"datasets\", \"iris\");\nregression_result = lm(@formula(SepalLength ~ SepalWidth + PetalLength + PetalWidth), df)","category":"page"},{"location":"manual/appearence/#Appearence","page":"Appearence","title":"Appearence","text":"","category":"section"},{"location":"manual/appearence/#Colors-and-mark-shapes","page":"Appearence","title":"Colors and mark shapes","text":"","category":"section"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"Coefplots.jl uses Colors.jl to manage the coloring of the plots. Colors.jl supports a variety of colorspaces. Colors.jl also provides a wide variety of named colors to choose from, see here for more information. ","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"The default color for Coefplot is the Julia logo blue. For MultiCoefplot and GroupedMultiCoefplot, Coefplots.jl iterates over Julia blue, Julia green, Julia red, Julia purple and restart if reaches the end. ","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"Colorable components in Coefplots.jl are Mark, Bar. Color these objects simply by passing a Color to named arguments fill or draw (fill doesn't work for Bar). ","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"The Mark object that gets passed to Coefplot.mark defines the style in which Coefplots.jl draw the point estimate, while Coefplot.errormark defines the the style of the endpoints of the confidence interval. The Bar object that gets passed to Coefplot.errorbar defines the style of the confidence interval, while Coefplot.connect defines the style of the line that connects consecutive coefficients if keepconnect is true.","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"The user can choose from a variety of mark shapes.","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"mark preview mark preview\nmark=\"*\" (Image: ) mark=\"x\" (Image: )\nmark=\"+\" (Image: ) mark=\"-\" (Image: )\nmark=\"|\" (Image: ) mark=\"asterisk\" (Image: )\nmark=\"star\" (Image: ) mark=\"10-pointed star\" (Image: )\nmark=\"oplus\" (Image: ) mark=\"oplus*\" (Image: )\nmark=\"otimes\" (Image: ) mark=\"otimes*\" (Image: )\nmark=\"square\" (Image: ) mark=\"square*\" (Image: )\nmark=\"triangle\" (Image: ) mark=\"triangle*\" (Image: )\nmark=\"diamond\" (Image: ) mark=\"diamond*\" (Image: )\nmark=\"pentagon\" (Image: ) mark=\"pentagon*\" (Image: )\nmark=\"halfcircle\" (Image: ) mark=\"halfcircle*\" (Image: )\nmark=\"halfdiamond*\" (Image: ) mark=\"halfsquare*\" (Image: )\nmark=\"halfsquare right*\" (Image: ) mark=\"halfsquare left*\" (Image: )\nmark=\"Mercedes star\" (Image: ) mark=\"Mercedes star flipped\" (Image: )\nmark=\"heart\" (Image: ) mark=\"ball\" (Image: )","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"For example, ","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"using Colors\ncoefplots_pool = parse(regression_result, mark=Mark(mark=\"heart\", marksize=3, fill=colorant\"salmon\", draw=colorant\"#FF0000\"),\n                                          errorbar=Bar(linewidth=2, linetype=Symbol(\"densely dotted\"), draw=colorant\"lightsalmon\"),\n                                          errormark=Mark(mark=:|, marksize=3.0, linewidth=0.8, linetype=:solid, draw=colorant\"firebrick2\"),\n                                          connect=Bar(draw=colorant\"lightsalmon\"),\n                                                    keepconnect=true)\n\np = plot(coefplots_pool)\n\nsavefigs(\"a1\", p) # hide","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"(Image: )","category":"page"},{"location":"manual/appearence/#Caption-Styles","page":"Appearence","title":"Caption Styles","text":"","category":"section"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"There are three elements about a caption that can be customized: font, size, and rotate. font dictates the font in which the caption is written in, size determines the font size, and rotate specifies the angle to which the caption is tilted. This can be useful when the caption is long but the intervals between captions are short.","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"coefplots_pool = parse(regression_result, xticklabel=CaptionStyle(font=\"phv\",  # fontcode for Helvetica\n                                                                  size=10,\n                                                                  rotate=45),\n                                          title=Label(content=\"My Title in Helvetica\", \n                                                      captionstyle=CaptionStyle(font=\"phv\")))\n\np = plot(coefplots_pool)\n\nsavefigs(\"a2\", p) # hide","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"(Image: )","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"Fonts can be accessed with T1 encoding. To list all code installed, check out the documents that pops out after typing texdoc fontname in terminal. Its appendix provides a big list of available fonts.","category":"page"},{"location":"manual/appearence/","page":"Appearence","title":"Appearence","text":"The caption style of title, xlabel, ylabel, xtickstyle, ytickstyle and note can be modified.","category":"page"},{"location":"api/types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"api/types/","page":"Types","title":"Types","text":"To be continued","category":"page"},{"location":"manual/utilities/#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"using PGFPlotsX\nsavefigs = (figname, obj) -> begin\n    pgfsave(figname * \".pdf\", obj)\n    run(`pdftocairo -svg -l  1 $(figname * \".pdf\") $(figname * \".svg\")`)\n    pgfsave(figname * \".tex\", obj);\n    return nothing\nend\n\nusing Coefplots\nusing RDatasets\nusing GLM\ndf = dataset(\"datasets\", \"iris\");\nregression_result = lm(@formula(SepalLength ~ SepalWidth + PetalLength + PetalWidth), df)","category":"page"},{"location":"manual/utilities/#LaTeX-escaping","page":"Utilities","title":"LaTeX escaping","text":"","category":"section"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"Charaters like % and & are reserved for special functionalities in LaTeX. In addition, Coefplots.jl uses symbolic coords for regressor names, which further complicates the string escaping situation: parenthesis, commas and periods all need to be escaped. PGFPlotsX.jl uses raw string literal which left these situations unattended. The function latex_escape() will escape these characters so that in the tex output file % is written as \\% (escaped, will not render as the symbol of the begining of comment in TeX), as an example. Coefplots.jl escapes parenthesis, commas and periods by adding a pair of brackets.","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"Coefplots.print_tex(Coefplots.latex_escape(\"%\"))","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"Coefplots.print_tex(Coefplots.latex_escape(\"&\"))","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"Coefplots.print_tex(Coefplots.latex_escape(\"(\"))","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"Coefplots.print_tex(Coefplots.latex_escape(\",\"))","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"latex_escape() can be handy when assembling the Coefplot from a DataFrame. When parse() is invoked on a regression, latex_escape() is automatically called. ","category":"page"},{"location":"manual/utilities/#Coefficient-Sorting","page":"Utilities","title":"Coefficient Sorting","text":"","category":"section"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"Sort the Coefplot by calling sortcoef!()","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"c = parse(regression_result)\nsortcoef!(c; rev=false)\n\np = plot(c)\nsavefigs(\"sort\", p) # hide","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"(Image: )","category":"page"},{"location":"manual/utilities/#HLine-and-rHLine-and-their-friends","page":"Utilities","title":"HLine and rHLine and their friends","text":"","category":"section"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"Coefplots.jl provides its version of HLine, VLine, HBand and VBand which is analogous to PGFPlotsX.jl but is compatible with symbolic coords. They can be directly added to the plot by passing them to plot(). Coefplots.jl also allows relative specification of the location in rHLine, rVLine, rHBand, rVBand. ","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"using PGFPlotsX\nhline = @pgf Coefplots.HLine({dashed, red}, 0) # a horizontal line through point 0 on y axis, which is numerical.\n\nrvband = @pgf rVBand({draw=\"none\", fill=\"yellow\", opacity = 0.4}, 0.25, 0.75) # a vertical band starting at the 1/4 of the total axis width, ending at the 3/4 of the total axis width.\n\np = plot(c, hline, rvband)\nsavefigs(\"addons\", p) # hide","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"(Image: )","category":"page"},{"location":"manual/utilities/#Annotation","page":"Utilities","title":"Annotation","text":"","category":"section"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"An Annotation is defined by its content, angle, point_at. point_at is a Tuple{Real, Real} that specifies the relative position of the annotation to the axis.","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"anno = Annotation(content=\"This is my anotation\", point_at=(0.5, 0.5), angle=45)\n# this will add an annotation at the center of \n\np = plot(c, hline, rvband, anno)\nsavefigs(\"addons2\", p) # hide","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/utilities/","page":"Utilities","title":"Utilities","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: header)","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Coefplots.jl is a Julia package that creates publication quality visualization for regressions. It aims to make available in Julia part of the functionalities of the Stata command coefplot. Coefplots.jl is built on PGFPlotsX.jl, which bridges the backend, LaTeX library pgf, and Julia interface. The figures produced with Coefplots can be previewed in notebooks and IDE's, like julia-vscode and Atom-Juno, thanks to PGFPlotsX.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Coefplots.jl can plot results directly from an estimation object (e.g. of type TableRegressionModel in StatsModels.jl, of type RegressionModel in StatsBase.jl, of type FixedEffectModel in FixedEffectModels.jl and so on) or DataFrame objects that contain estimation results. Results from multiple models or data frames can be combined in a single graph. Coefplots.jl draws markers for point estimates and error bars for confidence intervals. ","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.add(\"Coefplots\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Prerequisite Installation\nSimilar to the requirments for PGFPlotsX installation, Coefplots.jl requires a LaTeX installation with the PGFPlots package installed,\npdf2svg to generate or preview figures in svg. \npdftoppm for png figures. For more information of prerequisite installations, please refer to the installation section of PGFPlotsX.jl's documentation.","category":"page"},{"location":"#Gallery","page":"Home","title":"Gallery","text":"","category":"section"},{"location":"#In-a-event-study-scenario","page":"Home","title":"In a event study scenario","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: event_study)","category":"page"},{"location":"#Presenting-multi-dimensional-results","page":"Home","title":"Presenting multi-dimensional results","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: gmc_result)","category":"page"},{"location":"manual/quick_start/#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"manual/quick_start/#Plotting-directly-from-regression","page":"Quick Start","title":"Plotting directly from regression","text":"","category":"section"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"using PGFPlotsX\nsavefigs = (figname, obj) -> begin\n    pgfsave(figname * \".pdf\", obj)\n    run(`pdftocairo -svg -l  1 $(figname * \".pdf\") $(figname * \".svg\")`)\n    pgfsave(figname * \".tex\", obj);\n    return nothing\nend","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"We use the Iris dataset from RDatasets.jl to demonstrate the basic usage of Coefplots.jl","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"The quickest way to plot a coefplot is to invoke plot().","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"using Coefplots\nusing RDatasets\nusing GLM\ndf = dataset(\"datasets\", \"iris\");\nregression_result = lm(@formula(SepalLength ~ SepalWidth + PetalLength + PetalWidth), df)\np = plot(regression_result)\n\nsavefigs(\"quick_start1\", p) # hide","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"(Image: )","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"You can also customize your coefplot by passing named arguments. For example, ","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"p = plot(regression_result; keepcoef = [\"SepalWidth\", \"PetalLength\", \"PetalWidth\"], # drop intercept\n                            title = Label(content=\"My OLS regression\"), # add title\n                            xlabel = Label(content=\"Coefficients\"), # add xlabel\n                            ylabel = Label(content=\"Regressor Names\"), # add ylabel\n                            width = 250, # set width of the axis\n                            height = 180, # set height\n                            keepconnect = true, # connect consecutive coefficients\n                            level = 0.9, # confidence level, the default is 0.95.\n                            vertical = false, # default is true\n                            mark = Mark(mark=:\"triangle*\", marksize=4, linewidth=0)) # aesthetics\n\nsavefigs(\"quick_start2\", p) # hide","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"(Image: )","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"Apart from directly calling plot(), one can also invoke parse() to convert regression object to a Coefplot object. This allows users to deal with the plot with more flexibility, especially on combining plots.","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"using FixedEffectModels\nregression_withFE = reg(df, @formula(SepalLength ~ SepalWidth + PetalLength + PetalWidth + fe(Species)));\ncoefplots_withfe = parse(regression_withFE; title=Label(content=\"OLS\"))\ncoefplots_pool = parse(regression_result; keepcoef = [\"SepalWidth\", \"PetalLength\", \"PetalWidth\"], title=Label(content=\"with species FE\"))\nm = MultiCoefplot(coefplots_withfe, coefplots_pool; title = Label(content=\"My combined Coefplots\"),\n                                                    xlabel = Label(content=\"Regressor Names\"),\n                                                    ylabel = Label(content=\"Coefficients\"),\n                                                    note = Note(content=\"This is my note.\"))\np = plot(m)\n\nsavefigs(\"quick_start3\", p) # hide","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"(Image: )","category":"page"},{"location":"manual/quick_start/#Plotting-from-DataFrame","page":"Quick Start","title":"Plotting from DataFrame","text":"","category":"section"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"In order for Coefplots.jl to learn what to plot from a DataFrame, the DataFrame needs to contain the following columns: [:varname, :b, :se, :dof] (:dof is constant across rows while others should vary). ","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"using DataFrames\ndf = DataFrame(varname = [\"x1\", \"x2\", \"x3\"],\n               b = [1, 2, 3],\n               se = [0.1, 0.2, 0.3],\n               dof = 10)\nc = Coefplot(df)\np = plot(c)\n\nsavefigs(\"quick_start4\", p) # hide","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"[.pdf], [generated .tex]","category":"page"},{"location":"manual/quick_start/","page":"Quick Start","title":"Quick Start","text":"(Image: )","category":"page"},{"location":"api/functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"}]
}
