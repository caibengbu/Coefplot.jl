var documenterSearchIndex = {"docs":
[{"location":"quick_start/quick_start/#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"quick_start/quick_start/#Plotting-directly-from-regression","page":"Quick Start","title":"Plotting directly from regression","text":"","category":"section"},{"location":"quick_start/quick_start/","page":"Quick Start","title":"Quick Start","text":"using PGFPlotsX\nsavefigs = (figname, obj) -> begin\n    pgfsave(figname * \".pdf\", obj)\n    run(`pdftocairo -svg -l  1 $(figname * \".pdf\") $(figname * \".svg\")`)\n    pgfsave(figname * \".tex\", obj);\n    return nothing\nend","category":"page"},{"location":"quick_start/quick_start/","page":"Quick Start","title":"Quick Start","text":"We use the Iris dataset from RDatasets.jl to demonstrate the basic usage of Coefplots.jl","category":"page"},{"location":"quick_start/quick_start/","page":"Quick Start","title":"Quick Start","text":"The quickest way to plot a coefplot is to invoke plot().","category":"page"},{"location":"quick_start/quick_start/","page":"Quick Start","title":"Quick Start","text":"using Coefplots\nusing RDatasets\nusing GLM\ndf = dataset(\"datasets\", \"iris\");\nregression_result = lm(@formula(SepalLength ~ SepalWidth + PetalLength + PetalWidth), df)\np = plot(regression_result)\n\nsavefigs(\"quick_start1\", p) # hide","category":"page"},{"location":"quick_start/quick_start/","page":"Quick Start","title":"Quick Start","text":"[.pdf], [generated .tex]","category":"page"},{"location":"quick_start/quick_start/","page":"Quick Start","title":"Quick Start","text":"(Image: )","category":"page"},{"location":"quick_start/quick_start/","page":"Quick Start","title":"Quick Start","text":"You can also customize your coefplot by passing named arguments. For example, ","category":"page"},{"location":"quick_start/quick_start/","page":"Quick Start","title":"Quick Start","text":"p = plot(regression_result; keepcoef = [\"SepalWidth\", \"PetalLength\", \"PetalWidth\"], # drop intercept\n                            title = Label(content=\"My OLS regression\"), # add title\n                            xlabel = Label(content=\"Regressor Names\"), # add xlabel\n                            ylabel = Label(content=\"Coefficients\"), # add ylabel\n                            width = 250, # set width of the axis\n                            height = 180, # set height\n                            keepconnect = true, # connect consecutive coefficients\n                            level = 0.9, # confidence level, the default is 0.95.\n                            mark = Mark(mark=:\"triangle*\", marksize=4, linewidth=0)) # aesthetics\n\nsavefigs(\"quick_start2\", p) # hide","category":"page"},{"location":"quick_start/quick_start/","page":"Quick Start","title":"Quick Start","text":"[.pdf], [generated .tex]","category":"page"},{"location":"quick_start/quick_start/","page":"Quick Start","title":"Quick Start","text":"(Image: )","category":"page"},{"location":"quick_start/quick_start/","page":"Quick Start","title":"Quick Start","text":"Apart from directly calling plot(), one can also invoke parse() to convert regression object to a Coefplot object. This allows users to deal with the plot with more flexibility, especially on combining plots.","category":"page"},{"location":"quick_start/quick_start/","page":"Quick Start","title":"Quick Start","text":"using FixedEffectModels\nregression_withFE = reg(df, @formula(SepalLength ~ SepalWidth + PetalLength + PetalWidth + fe(Species)))\ncoefplots_withfe = parse(regression_withFE; title=Label(content=\"OLS\"))\ncoefplots_pool = parse(regression_result; keepcoef = [\"SepalWidth\", \"PetalLength\", \"PetalWidth\"], title=Label(content=\"with species FE\"))\nm = MultiCoefplot(coefplots_withfe, coefplots_pool; title = Label(content=\"My combined Coefplots\"),\n                                                    xlabel = Label(content=\"Regressor Names\"),\n                                                    ylabel = Label(content=\"Coefficients\"),\n                                                    note = Note(content=\"This is my note.\"))\np = plot(m)\n\nsavefigs(\"quick_start3\", p) # hide","category":"page"},{"location":"quick_start/quick_start/","page":"Quick Start","title":"Quick Start","text":"[.pdf], [generated .tex]","category":"page"},{"location":"quick_start/quick_start/","page":"Quick Start","title":"Quick Start","text":"(Image: )","category":"page"},{"location":"quick_start/quick_start/#Plotting-from-DataFrame","page":"Quick Start","title":"Plotting from DataFrame","text":"","category":"section"},{"location":"quick_start/quick_start/","page":"Quick Start","title":"Quick Start","text":"In order for Coefplots.jl to learn what to plot from a DataFrame, the DataFrame needs to contain the following columns: [:varname, :b, :se, :dof] (:dof is constant across rows while others should vary). ","category":"page"},{"location":"quick_start/quick_start/","page":"Quick Start","title":"Quick Start","text":"using DataFrames\ndf = DataFrame(varname = [\"x1\", \"x2\", \"x3\"],\n               b = [1, 2, 3],\n               se = [0.1, 0.2, 0.3],\n               dof = 10)\nc = Coefplot(df)\np = plot(c)\n\nsavefigs(\"quick_start4\", p) # hide","category":"page"},{"location":"quick_start/quick_start/","page":"Quick Start","title":"Quick Start","text":"[.pdf], [generated .tex]","category":"page"},{"location":"quick_start/quick_start/","page":"Quick Start","title":"Quick Start","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: header)","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Coefplots.jl is a Julia package that creates publication quality visualization for regressions. It aims to make available in Julia part of the functionalities of the Stata command coefplot. Coefplots.jl is built on PGFPlotsX.jl, which bridges the backend, LaTeX library PGFPlots, and Julia interface. The figures produced with Coefplots can be previewed in notebooks and IDE's, like julia-vscode and Atom-Juno, with the help of PGFPlotsX.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Coefplots.jl can plot results directly from an estimation object (e.g. of type TableRegressionModel in StatsModels.jl, of type RegressionModel in StatsBase.jl, FixedEffectModel in FixedEffectModels.jl and so on) or DataFrame objects that contain estimation results. Results from multiple models or data frames can be combined in a single graph. Coefplots.jl draws markers for point estimates and error bars for confidence intervals. ","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.add(\"Coefplots\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Prerequisite Installation\nSimilar to the requirments for PGFPlotsX installation, Coefplots.jl requires a LaTeX installation with the PGFPlots package installed,\npdf2svg to generate or preview figures in svg. \npdftoppm for png figures. For more information of prerequisite installations, please refer to the installation section of PGFPlotsX.jl's documentation.","category":"page"},{"location":"#Gallery","page":"Home","title":"Gallery","text":"","category":"section"},{"location":"#In-a-event-study-scenario","page":"Home","title":"In a event study scenario","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: event_study)","category":"page"},{"location":"#Presenting-multi-dimensional-results","page":"Home","title":"Presenting multi-dimensional results","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: gmc_result)","category":"page"}]
}
